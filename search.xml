<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux中代码覆盖率实现原理（二）</title>
      <link href="2020/12/23/gcov2/"/>
      <url>2020/12/23/gcov2/</url>
      
        <content type="html"><![CDATA[<p>从linux中代码覆盖率实现原理(一)中可以知道，gcda文件生成的原理是__llvm_gcov_flush会依次调用llvm_gcda_start_file、llvm_gcda_emit_function、<br>llvm_gcda_emit_arcs函数将数据导出到gcda文件。但是查看kernel/gcov/clang.c中这几个函数的源码，发现其只是将数据保存在本地，那么怎么才能得到gcda文件呢？</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">llvm_gcda_emit_arcs</span><span class="token punctuation">(</span>u32 num_counters<span class="token punctuation">,</span> u64 <span class="token operator">*</span>counters<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">struct</span> gcov_fn_info <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token function">list_last_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current_info<span class="token operator">-></span>functions<span class="token punctuation">,</span>                        <span class="token keyword">struct</span> gcov_fn_info<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token operator">-></span>num_counters <span class="token operator">=</span> num_counters<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//只是将数据保存在本地链表</span>        info<span class="token operator">-></span>counters <span class="token operator">=</span> counters<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="debugfs-gcov"><a href="#debugfs-gcov" class="headerlink" title="debugfs-gcov"></a>debugfs-gcov</h2><p>查看kernel/gcov/fs.c中发现gcov_fs_init会向debugfs中注册gcov文件夹</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Create debugfs entries. */</span><span class="token keyword">static</span> __init <span class="token keyword">int</span> <span class="token function">gcov_fs_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">init_node</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root_node<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * /sys/kernel/debug/gcov will be parent for the reset control file         * and all profiling files.         */</span>        root_node<span class="token punctuation">.</span>dentry <span class="token operator">=</span> <span class="token function">debugfs_create_dir</span><span class="token punctuation">(</span><span class="token string">"gcov"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * Create reset file which resets all profiling counts when written         * to.         */</span>        <span class="token function">debugfs_create_file</span><span class="token punctuation">(</span><span class="token string">"reset"</span><span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">,</span> root_node<span class="token punctuation">.</span>dentry<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                            <span class="token operator">&amp;</span>gcov_reset_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Replay previous events to get our fs hierarchy up-to-date. */</span>        <span class="token function">gcov_enable_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">device_initcall</span><span class="token punctuation">(</span>gcov_fs_init<span class="token punctuation">)</span></code></pre><p>那么这个文件夹中存放哪些东西？如何存放的？与上面说的得到gcda文件有什么关系呢？ </p><p>可知如果编译时添加了–coverage编译选项，那么clang会为每个模块插桩入__llvm_gcov_init函数，其主要功能就是调用llvm_gcov_init，<br>并将__llvm_gcov_writeout、__llvm_gcov_flush函数地址传入llvm_gcov_init。 __llvm_gcov_init函数被放在init_array这个section中，<br>其会在加载时在main函数之前调用，也就是说每个模块在加载时会调用到llvm_gcov_init函数。</p><p>llvm_gcov_init函数中新建了一个gcov_init的结构体，并且调用gcov_event(GCOV_ADD, info);<br>gcov_event中会判断是否存在对应的gcov_node，如果不存在则新建gcov_node</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">gcov_event</span><span class="token punctuation">(</span><span class="token keyword">enum</span> gcov_action action<span class="token punctuation">,</span> <span class="token keyword">struct</span> gcov_info <span class="token operator">*</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">struct</span> gcov_node <span class="token operator">*</span>node<span class="token punctuation">;</span>        <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> <span class="token function">get_node_by_name</span><span class="token punctuation">(</span><span class="token function">gcov_info_filename</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看是否已建立过此gcov_node</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> GCOV_ADD<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span>                        <span class="token function">add_info</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                        <span class="token function">add_node</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建gcov_node</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>新建node的代码最终会走到new_node函数中，其除了初始化gcov_node将gcov_info与gcov_node关联外，还调用debugfs_create_file<br>在gcov下创建了文件node-&gt;name，文件的private_data就是gcov_node，文件的file_operations是gcov_data_fops</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> gcov_node <span class="token operator">*</span><span class="token function">new_node</span><span class="token punctuation">(</span><span class="token keyword">struct</span> gcov_node <span class="token operator">*</span>parent<span class="token punctuation">,</span>                                  <span class="token keyword">struct</span> gcov_info <span class="token operator">*</span>info<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">struct</span> gcov_node <span class="token operator">*</span>node<span class="token punctuation">;</span>        node <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> gcov_node<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//申请与name关联的gcov_node的内存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span>                <span class="token keyword">goto</span> err_nomem<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token operator">-></span>loaded_info <span class="token operator">=</span> <span class="token function">kcalloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> gcov_info <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-></span>loaded_info<span class="token punctuation">)</span>                        <span class="token keyword">goto</span> err_nomem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">init_node</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> info<span class="token punctuation">,</span> name<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将info挂载到gcov_node上</span>        <span class="token comment" spellcheck="true">/* Differentiate between gcov data file nodes and directory nodes. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token operator">-></span>dentry <span class="token operator">=</span> <span class="token function">debugfs_create_file</span><span class="token punctuation">(</span><span class="token function">deskew</span><span class="token punctuation">(</span>node<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">,</span>                                        parent<span class="token operator">-></span>dentry<span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gcov_data_fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在debugfs中新建文件</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>                node<span class="token operator">-></span>dentry <span class="token operator">=</span> <span class="token function">debugfs_create_dir</span><span class="token punctuation">(</span>node<span class="token operator">-></span>name<span class="token punctuation">,</span> parent<span class="token operator">-></span>dentry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span>                <span class="token function">add_links</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token operator">-></span>dentry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node<span class="token operator">-></span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>parent<span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>node<span class="token operator">-></span>all<span class="token punctuation">,</span> <span class="token operator">&amp;</span>all_head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//将gcov_node插入到全局gcov_node链表中</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>err_nomem<span class="token punctuation">:</span>        <span class="token function">kfree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">"out of memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>至此，我们可以知道每个模块在加载时会调用到llvm_gcov_init函数，llvm_gcov_init函数会能过gcov_event(GCOV_ADD, info)在debugfs中的gcov目录下<br>创建文件内容与gcov_info相关的文件，其file_operations为gcov_data_fops。</p><p>但目前仍未揭晓debugfs中的文件为什么是gcda文件的操作，下一篇将继续研究 :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> linx, gcov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux代码中pr_fmt是什么意思</title>
      <link href="2020/12/13/prfmt/"/>
      <url>2020/12/13/prfmt/</url>
      
        <content type="html"><![CDATA[<p>接上一篇，在看clang.c时，发现最上面有一句</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> pr_fmt(fmt)     "gcov: " fmt</span></code></pre><p>这个是干嘛的？ 乍一看没看明白，而且在kernel/gcov中也没有找到pr_fmt的使用<br>其实，这个的使用在include/linux/printk.h中<br>首先几个可以看出来带有与日志级别匹配后缀的几个函数，从这里也可以看出来pr应该是print的意思</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> pr_emerg(fmt, ...) \        pr_printk_hash(KERN_EMERG, fmt, ##__VA_ARGS__)</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_alert(fmt, ...) \        pr_printk_hash(KERN_ALERT, fmt, ##__VA_ARGS__)</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_crit(fmt, ...) \        pr_printk_hash(KERN_CRIT, fmt, ##__VA_ARGS__)</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_err(fmt, ...) \        pr_printk_hash(KERN_ERR, fmt, ##__VA_ARGS__)</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_warning(fmt, ...) \        pr_printk_hash(KERN_WARNING, fmt, ##__VA_ARGS__)</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_warn pr_warning</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_notice(fmt, ...) \        pr_printk_hash(KERN_NOTICE, fmt, ##__VA_ARGS__)</span><span class="token macro property">#<span class="token directive keyword">define</span> pr_info(fmt, ...) \        pr_printk_hash(KERN_INFO, fmt, ##__VA_ARGS__)</span></code></pre><p>上面几个函数都调用了pr_printk_hash，而pr_printk_hash调用了printk，以及将pr_info传入来的fmt使用<strong>pr_fmt</strong>处理后作为参数<br>嘿，这不就是咱们熟悉的领域了吗，弄了半天就是printk呗</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> pr_printk_hash(level, format, ...) \        printk(level pr_fmt(format), ##__VA_ARGS__)</span></code></pre><p>所以，回去kernel/gcov中看一下如何使用的，例如kernel/gcov/fs.c中有</p><pre class=" language-c"><code class="language-c"><span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">"out of memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>按照上面的宏定义展开，最终能够得到</p><pre class=" language-c"><code class="language-c"><span class="token function">pr_printk_hash</span><span class="token punctuation">(</span>KERN_WARNING<span class="token punctuation">,</span> <span class="token string">"out of memory\n"</span><span class="token punctuation">)</span><span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING<span class="token punctuation">,</span> <span class="token function">pr_fmt</span><span class="token punctuation">(</span><span class="token string">"out of memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING<span class="token punctuation">,</span> <span class="token string">"gcov:  out of memory\n"</span><span class="token punctuation">)</span></code></pre><p><strong>害，就这</strong><br>不过这样一封装确实用起来方便多了，如果自己写一个软件需要组件log的话可以参考这种</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中代码覆盖率实现原理（一）</title>
      <link href="2020/12/12/gcov/"/>
      <url>2020/12/12/gcov/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道gcc有统计代码覆盖率的工具gcov，其使用方法基本就是打开–coverage编译选项，然后在程序编译时会生成含有代码Basic Block分析结果的gcno文件<br>程序运行后，会生成含有Basic Block的运行统计数据的gcda文件。然后使用lcov工具以及genhtml工具即可生成代码覆盖率的html报告了<br>其实clang编译器也支持与gcc的gcov兼容的代码覆盖率方案，其在原理上稍有不同，具体原理可以参考文章<a href="https://tech.meituan.com/2018/12/27/ios-increment-coverage.html">iOS 覆盖率检测原理与增量代码测试覆盖率工具实现</a></p><p>在使用gcov代码覆盖率时，一般都是统计一个可以在linux系统上运行的用户态的程序代码，那么linux的内核的代码覆盖率怎么统计呢？<br>之前有不少人尝试过使用clang编译linux内核代码，虽然我没试过，但我看到linux内核代码中是有与clang兼容gcc-gcov相关的代码的，所以今天就来介绍这个<strong>使用clang编译时linux的内核的代码覆盖率统计</strong>相关的代码的分析吧</p><p>在第一篇文章先看kernel/gcov/clang.c，其中有与gcda相关的基本的数据结构，以及定制clang源码中与gcda数据导出相关的函数、为了方便而实现的一些函数</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>基本的数据结构主要是有gcov_info结构体，gcov_fn_info结构体，以及全局链表clang_gcov_list<br>可以简单的把gcov_info理解为是保存有一个源码文件的代码覆盖率信息的数据，gcov_fn_info是这个文件中一个函数的的覆盖率信息的数据<br>clang_gcov_list则是所有文件的覆盖率信息的链表</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> gcov_info <span class="token punctuation">{</span>        <span class="token keyword">struct</span> list_head head<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//源码文件的文件名</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>              u32 checksum<span class="token punctuation">;</span>        <span class="token keyword">struct</span> list_head functions<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//gcov_fn_info的链表</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> gcov_fn_info <span class="token punctuation">{</span>        <span class="token keyword">struct</span> list_head head<span class="token punctuation">;</span>        u32 ident<span class="token punctuation">;</span>        u32 checksum<span class="token punctuation">;</span>        u8 use_extra_checksum<span class="token punctuation">;</span>        u32 cfg_checksum<span class="token punctuation">;</span>        u32 num_counters<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//计数器的个数</span>        u64 <span class="token operator">*</span>counters<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//指向存有计数器值的地址</span>        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>function_name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//函数名</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token function">LIST_HEAD</span><span class="token punctuation">(</span>clang_gcov_list<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//gcov_info的链表</span></code></pre><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>clang源码中实现gcov data数据生成时的流程与gcc稍有不同，在编译时编译器会插入__llvm_gcov_init、__llvm_gcov_writeout和__llvm_gcov_flush函数，<br>__llvm_gcov_init函数会调用llvm_gcov_init函数并将__llvm_gcov_writeout、__llvm_gcov_flush函数地址作为参数传入。而__llvm_gcov_flush会依次调用<br>llvm_gcda_start_file、llvm_gcda_emit_function、llvm_gcda_emit_arcs函数将数据导出到gcda文件。因此如果想要对gcda数据生成的目的地进行定制化的话，<br>需要实现的就是如下几个函数</p><pre class=" language-c"><code class="language-c"> <span class="token function">llvm_gcda_start_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token function">llvm_gcda_emit_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token function">llvm_gcda_emit_arcs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">llvm_gcda_summary_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">llvm_gcda_end_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>clang.c中对于这几个函数的实现的目的就是把所有目标文件的gcov_info存在clang_gcov_list这个全局链表里</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">llvm_gcov_init</span><span class="token punctuation">(</span>llvm_gcov_callback writeout<span class="token punctuation">,</span> llvm_gcov_callback flush<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">struct</span> gcov_info <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-></span>functions<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化gcov_info中的链表节点</span>        <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gcov_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-></span>head<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clang_gcov_list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//插入到全局链表</span>        current_info <span class="token operator">=</span> info<span class="token punctuation">;</span>        <span class="token function">writeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//覆盖率分发，将当前目标文件的覆盖率数据存入current_info</span>        current_info <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gcov_events_enabled<span class="token punctuation">)</span>                <span class="token function">gcov_event</span><span class="token punctuation">(</span>GCOV_ADD<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//事件注册，详细看下篇文章</span>        <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gcov_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>llvm_gcda_emit_function 与 llvm_gcda_emit_arcs的作用，基本就是将数据存放到当前gcov_info中的最新的（即functions的最后一个节点）gcov_fn_info中<br>代码也比较简单，基本就是新建结构体更新数据，存放到链表中</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">llvm_gcda_emit_function</span><span class="token punctuation">(</span>u32 ident<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>function_name<span class="token punctuation">,</span>                u32 func_checksum<span class="token punctuation">,</span> u8 use_extra_checksum<span class="token punctuation">,</span> u32 cfg_checksum<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">struct</span> gcov_fn_info <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token operator">-></span>ident <span class="token operator">=</span> ident<span class="token punctuation">;</span>        info<span class="token operator">-></span>checksum <span class="token operator">=</span> func_checksum<span class="token punctuation">;</span>        info<span class="token operator">-></span>use_extra_checksum <span class="token operator">=</span> use_extra_checksum<span class="token punctuation">;</span>        info<span class="token operator">-></span>cfg_checksum <span class="token operator">=</span> cfg_checksum<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>function_name<span class="token punctuation">)</span>                info<span class="token operator">-></span>function_name <span class="token operator">=</span> <span class="token function">kstrdup</span><span class="token punctuation">(</span>function_name<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-></span>head<span class="token punctuation">,</span> <span class="token operator">&amp;</span>current_info<span class="token operator">-></span>functions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将gcov_fn_info插入到当前gcov_info的functions链表里</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">llvm_gcda_emit_arcs</span><span class="token punctuation">(</span>u32 num_counters<span class="token punctuation">,</span> u64 <span class="token operator">*</span>counters<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">struct</span> gcov_fn_info <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token function">list_last_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current_info<span class="token operator">-></span>functions<span class="token punctuation">,</span>                        <span class="token keyword">struct</span> gcov_fn_info<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token operator">-></span>num_counters <span class="token operator">=</span> num_counters<span class="token punctuation">;</span>        info<span class="token operator">-></span>counters <span class="token operator">=</span> counters<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>convert_to_gcda函数就是将gcov_info中保存的数据按照gcda的格式存放到buffer里</p><p>从上可以看出，clang.c中根据clang编译器兼容gcov的原理重新实现了数据导出部分的函数，将数据存放在了clang_gcov_list这一全局gcov_info链表里<br>那么，怎么才能真正像用户态程序一样获得gcda文件呢？ 请看下一章</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux gcov gcda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中的等待队列</title>
      <link href="2020/12/09/waitq/"/>
      <url>2020/12/09/waitq/</url>
      
        <content type="html"><![CDATA[<p>linux中的代码每一块深究了看，都有好多东西，在看printk代码时，你会发现syslog进行读操作时，如果ring buffer没有新的内容的话，进程会等待<br>而实现这个操作是通过linux中的等待队列实现的，等待队列据说还和信号量有关系，这个后面再看，今天研究下等待队列wait queue</p><pre class=" language-c"><code class="language-c"><span class="token keyword">case</span> SYSLOG_ACTION_READ<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* Read from log */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>        error <span class="token operator">=</span> <span class="token function">wait_event_interruptible</span><span class="token punctuation">(</span>log_wait<span class="token punctuation">,</span> syslog_seq <span class="token operator">!=</span> log_next_seq<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里会等待</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token keyword">return</span> error<span class="token punctuation">;</span>        error <span class="token operator">=</span> <span class="token function">syslog_print</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>等列队列相关数据结构有两个，一个是等列队列头wait_queue_head，另一个是等列队列元素wait_queue_entry</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * A single wait-queue entry structure: */</span><span class="token keyword">struct</span> wait_queue_entry <span class="token punctuation">{</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span>            flags<span class="token punctuation">;</span>        <span class="token keyword">void</span>                    <span class="token operator">*</span>private<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//指向等待队列的进程</span>        wait_queue_func_t       func<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//唤醒函数</span>        <span class="token keyword">struct</span> list_head        entry<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//要挂到wait_queue_head链表里的节点</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> wait_queue_head <span class="token punctuation">{</span>        spinlock_t              lock<span class="token punctuation">;</span>        <span class="token keyword">struct</span> list_head        head<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//双向链表</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> wait_queue_head wait_queue_head_t<span class="token punctuation">;</span></code></pre><p>在使用时，一般会用DECLARE_WAIT_QUEUE_HEAD宏来初始化一个等待队列头</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __WAIT_QUEUE_HEAD_INITIALIZER(name) {                                   \        .lock           = __SPIN_LOCK_UNLOCKED(name.lock),                      \        .head           = { &amp;(name).head, &amp;(name).head } }    </span><span class="token comment" spellcheck="true">// list_head的next 和 prev是同一个结点，即只有一个结点</span><span class="token macro property">#<span class="token directive keyword">define</span> DECLARE_WAIT_QUEUE_HEAD(name) \        struct wait_queue_head name = __WAIT_QUEUE_HEAD_INITIALIZER(name)    </span><span class="token comment" spellcheck="true">//通过__WAIT_QUEUE_HEAD_INITIALIZER赋初值</span></code></pre><p>用DECLARE_WAITQUEUE来初始化队列元素，不过这个一般用不到显示调用，后面会讲</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __WAITQUEUE_INITIALIZER(name, tsk) {                                    \        .private        = tsk,                                                  \        .func           = default_wake_function,   </span><span class="token comment" spellcheck="true">//默认唤醒函数                             \</span>        <span class="token punctuation">.</span>entry          <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">define</span> DECLARE_WAITQUEUE(name, tsk)                                            \        struct wait_queue_entry name = __WAITQUEUE_INITIALIZER(name, tsk)</span></code></pre><h2 id="睡眠与唤醒"><a href="#睡眠与唤醒" class="headerlink" title="睡眠与唤醒"></a>睡眠与唤醒</h2><p>让我们再次看一下printk.c中do_syslog中的SYSLOG_ACTION_READ代码，发现其睡眠等待是调用wait_event_interruptible函数即可<br>其唤醒是在wake_up_klogd_work_func函数里调用的wake_up_interruptible。okay，看一下这两个函数的实现</p><h3 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> wait_event_interruptible(wq_head, condition)                            \({                                                                              \        int __ret = 0;                                                          \        might_sleep();                                                          \        if (!(condition))                                                       \                __ret = __wait_event_interruptible(wq_head, condition);         \        __ret;                                                                  \})</span></code></pre><p>很容易理解，如果condition不成立的话，则调用__wait_event_interruptible，接着进去看的话发现重头戏在__wait_event函数式宏<br>在__wait_event里，会新定义一个等待队列元素wait_queue_entry，通过init_wait_entry初始化，然后在prepare_to_wait_event里将其加入等待队列头wq_head的链表里<br>并且判断condition是否成立以及进程是否有信号待处理，如果有的话则跳出，否则就调用schedule直至下次被调度到</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __wait_event_interruptible(wq_head, condition)                          \        ___wait_event(wq_head, condition, TASK_INTERRUPTIBLE, 0, 0,             \                      schedule())</span><span class="token macro property">#<span class="token directive keyword">define</span> ___wait_event(wq_head, condition, state, exclusive, ret, cmd)           \({                                                                              \        __label__ __out;                                                        \        struct wait_queue_entry __wq_entry;                                     \        long __ret = ret;       </span><span class="token comment" spellcheck="true">/* explicit shadow */</span>                           \                                                                                \        <span class="token function">init_wait_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>__wq_entry<span class="token punctuation">,</span> exclusive <span class="token operator">?</span> WQ_FLAG_EXCLUSIVE <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                              \                <span class="token keyword">long</span> __int <span class="token operator">=</span> <span class="token function">prepare_to_wait_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wq_head<span class="token punctuation">,</span> <span class="token operator">&amp;</span>__wq_entry<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\                                                                                \                <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//如果条件成立，break跳出                        \</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                                                  \                <span class="token comment" spellcheck="true">//如果是可以interrupt的状态，且有信号待处理，则out，对于于调用wait_event_interruptible加入等待队列的来说，是可以interrupt的状态                                                              \</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">___wait_is_interruptible</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> __int<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 \                        __ret <span class="token operator">=</span> __int<span class="token punctuation">;</span>                                          \                        <span class="token keyword">goto</span> __out<span class="token punctuation">;</span>                                             \                <span class="token punctuation">}</span>                                                               \                                                                                \                cmd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用schedule()，调度其他进程防止这里空转浪费资源              \</span>        <span class="token punctuation">}</span>                                                                       \        <span class="token function">finish_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wq_head<span class="token punctuation">,</span> <span class="token operator">&amp;</span>__wq_entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将元素从队列删除                     \</span>__out<span class="token punctuation">:</span>  __ret<span class="token punctuation">;</span>                                                                  \<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>再看一下init_wait_entry函数对wait_queue_entry初始化</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_wait_entry</span><span class="token punctuation">(</span><span class="token keyword">struct</span> wait_queue_entry <span class="token operator">*</span>wq_entry<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>        wq_entry<span class="token operator">-></span>flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>        wq_entry<span class="token operator">-></span>private <span class="token operator">=</span> current<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//当前进程，即拥有此元素的进程</span>        wq_entry<span class="token operator">-></span>func <span class="token operator">=</span> autoremove_wake_function<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//默认唤醒函数</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wq_entry<span class="token operator">-></span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>init_wait_entry<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="唤醒"><a href="#唤醒" class="headerlink" title="唤醒"></a>唤醒</h3><p>与wait_event_interruptible对应的唤醒函数是wake_up_interruptible，其调用流程里最重要的是__wake_up_common函数</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> wake_up_interruptible(x)        __wake_up(x, TASK_INTERRUPTIBLE, 1, NULL) </span><span class="token comment" spellcheck="true">//需要注意这里的1，下面会讲</span><span class="token comment" spellcheck="true">/** * __wake_up - wake up threads blocked on a waitqueue. * @wq_head: the waitqueue * @mode: which threads * @nr_exclusive: how many wake-one or wake-many threads to wake up     //从__wake_up传来的值是1 * @key: is directly passed to the wakeup function * * If this function wakes up a task, it executes a full memory barrier before * accessing the task state. */</span><span class="token keyword">void</span> <span class="token function">__wake_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> wait_queue_head <span class="token operator">*</span>wq_head<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span>                        <span class="token keyword">int</span> nr_exclusive<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">__wake_up_common_lock</span><span class="token punctuation">(</span>wq_head<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> nr_exclusive<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>__wake_up_common函数中比较难以理解的是bookmark的作用，以及从__wake_up中传过来的值nr_exclusive的作用<br>bookmark这一entry的作用是为了防止唤醒这一操作持有锁过久，通过与WAITQUEUE_WALK_BREAK_CNT配合，在唤醒一定个数后，释放一段时间</p><p>nr_exclusive是作用是因为有些进程拥有WQ_FLAG_EXCLUSIVE标志，该标志意味着进程想要被独占地唤醒，而nr_exclusive就是控制独占唤醒进程的个数</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Scan threshold to break wait queue walk. * This allows a waker to take a break from holding the * wait queue lock during the wait queue walk. */</span><span class="token macro property">#<span class="token directive keyword">define</span> WAITQUEUE_WALK_BREAK_CNT 64</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__wake_up_common</span><span class="token punctuation">(</span><span class="token keyword">struct</span> wait_queue_head <span class="token operator">*</span>wq_head<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span>                        <span class="token keyword">int</span> nr_exclusive<span class="token punctuation">,</span> <span class="token keyword">int</span> wake_flags<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span>                        wait_queue_entry_t <span class="token operator">*</span>bookmark<span class="token punctuation">)</span><span class="token punctuation">{</span>        wait_queue_entry_t <span class="token operator">*</span>curr<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">lockdep_assert_held</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wq_head<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bookmark <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bookmark<span class="token operator">-></span>flags <span class="token operator">&amp;</span> WQ_FLAG_BOOKMARK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果bookmark被设置了WQ_FLAG_BOOKMARK</span>                curr <span class="token operator">=</span> <span class="token function">list_next_entry</span><span class="token punctuation">(</span>bookmark<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取bookmark之后的一个entry</span>                <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bookmark<span class="token operator">-></span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 从链表删除bookmark</span>                bookmark<span class="token operator">-></span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>                curr <span class="token operator">=</span> <span class="token function">list_first_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wq_head<span class="token operator">-></span>head<span class="token punctuation">,</span> wait_queue_entry_t<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取链表第一个节点entry</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>curr<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token operator">&amp;</span>wq_head<span class="token operator">-></span>head<span class="token punctuation">)</span>                <span class="token keyword">return</span> nr_exclusive<span class="token punctuation">;</span>        <span class="token function">list_for_each_entry_safe_from</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> next<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wq_head<span class="token operator">-></span>head<span class="token punctuation">,</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">unsigned</span> flags <span class="token operator">=</span> curr<span class="token operator">-></span>flags<span class="token punctuation">;</span>                <span class="token keyword">int</span> ret<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> WQ_FLAG_BOOKMARK<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//跳过带有WQ_FLAG_BOOKMARK flag的entry</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> curr<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> wake_flags<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//唤醒</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> WQ_FLAG_EXCLUSIVE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">--</span>nr_exclusive<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 如果是独占进程则，nr_exclusive减1并跳出</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bookmark <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>cnt <span class="token operator">></span> WAITQUEUE_WALK_BREAK_CNT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token comment" spellcheck="true">//如果唤醒的entry的cnt大于WAITQUEUE_WALK_BREAK_CNT的值，那么为bookmark这一entry加上WQ_FLAG_BOOKMARK</span>                                <span class="token punctuation">(</span><span class="token operator">&amp;</span>next<span class="token operator">-></span>entry <span class="token operator">!=</span> <span class="token operator">&amp;</span>wq_head<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        bookmark<span class="token operator">-></span>flags <span class="token operator">=</span> WQ_FLAG_BOOKMARK<span class="token punctuation">;</span>                        <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bookmark<span class="token operator">-></span>entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next<span class="token operator">-></span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//并将其加入链表最后</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nr_exclusive<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux内核日志的存储与读取</title>
      <link href="2020/12/06/syslog/"/>
      <url>2020/12/06/syslog/</url>
      
        <content type="html"><![CDATA[<p>linux kernel中可以通过printk输出日志，那么日志内容到底会被存放在哪里以及怎么读取呢？</p><h2 id="printk"><a href="#printk" class="headerlink" title="printk"></a>printk</h2><p>通过查看linux-source/kernel/printk/printk.c中的源码可知，printk函数一路通过vprintk_func、vprintk_default、<br>vprintk_emit、vprintk_store、log_output调用到log_store函数，其中某些函数执行日志格式解析的功能不是本文关注重点，不再提及<br>log_store函数的功能就是执行存储一条日志的动作，从下图中的源码可以看出是将每条结构为printk_log的日志条目存储到<em>log_buf</em>中<br>log_next_idx是下一条日志存放的相对于log_buf起始位置的偏移量，log_next_seq是下一条日志的序列号</p><img src="/2020/12/06/syslog/store.png" class="" title="log_store"><p>log_buf可以看到其是一个全局变量，其大小是1 &lt;&lt; CONFIG_LOG_BUF_SHIFT，CONFIG_LOG_BUF_SHIFT定义在init/Kconfig中其值一般是14，即log_buf一般为16KB，那么16KB就足够存放所有kernel日志了吗？ 感觉有点不可信啊</p><img src="/2020/12/06/syslog/logbuf.png" class="" title="log_buf"><p>在刚才找到CONFIG_LOG_BUF_SHIFT的定义时，发现下一个定义是LOG_CPU_MAX_BUF_SHIFT，其解释是”CPU kernel log buffer size contribution (13 =&gt; 8 KB, 17 =&gt; 128KB)”。哎？这个好像也是log buf大小的相关数，那么是怎么回事呢？</p><p>printk.c中的log_buf_add_cpu使用到了这个值，通过调用log_buf_len_update更新了全局变量new_log_buf_len的大小</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __LOG_CPU_MAX_BUF_LEN (1 &lt;&lt; CONFIG_LOG_CPU_MAX_BUF_SHIFT)</span>cpu_extra <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">num_possible_cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> __LOG_CPU_MAX_BUF_LEN<span class="token punctuation">;</span><span class="token function">log_buf_len_update</span><span class="token punctuation">(</span>cpu_extra <span class="token operator">+</span> __LOG_BUF_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>setup_log_buf函数中会对buf进行更新大小，更新方法就是新申请一块内存，将log_buf的地址指向新申请的地址</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>early <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>new_log_buf_len<span class="token punctuation">)</span>    <span class="token function">log_buf_add_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new_log_buf_len<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span> new_log_buf <span class="token operator">=</span> <span class="token function">memblock_alloc</span><span class="token punctuation">(</span>new_log_buf_len<span class="token punctuation">,</span> LOG_ALIGN<span class="token punctuation">)</span><span class="token punctuation">;</span>log_buf_len <span class="token operator">=</span> new_log_buf_len<span class="token punctuation">;</span>log_buf <span class="token operator">=</span> new_log_buf<span class="token punctuation">;</span></code></pre><p>setup_log_buf是在init/main.c中的start_kernel函数被调用的。</p><p>这样做的原因应该是为了保证在kernel被完全启动前的日志也能够保存，kernel启动后会增大log buf的大小保证运行中的日志保存</p><h2 id="读取方法"><a href="#读取方法" class="headerlink" title="读取方法"></a>读取方法</h2><p>log buf中读取的方法有好几种，如下图所示，可以通过glibc封装的sys_syslog系统调用klogctl函数来读取，也可以通过读取/proc/kmsg来读取，或者是操作/dev/kmsg来获取log</p><img src="/2020/12/06/syslog/read.png" class="" title="read"><h3 id="syslog系统调用"><a href="#syslog系统调用" class="headerlink" title="syslog系统调用"></a>syslog系统调用</h3><p>我们一般使系统调用都是通过glibc的封装，其对sys_syslog的系统调用封装的函数并不叫syslog，而是klogctl</p><p>能过syslog系统调用的定义代码发现，其主要是调用了do_syslog函数来实现的功能</p><pre class=" language-c"><code class="language-c"><span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>syslog<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">do_syslog</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> SYSLOG_FROM_READER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>do_syslog会判断type的类型，执行不同的操作，例如SYSLOG_ACTION_READ会调用syslog_print将log buf中的log输出到用户态buf</p><pre class=" language-c"><code class="language-c"><span class="token keyword">case</span> SYSLOG_ACTION_READ<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* Read from log */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>        error <span class="token operator">=</span> <span class="token function">wait_event_interruptible</span><span class="token punctuation">(</span>log_wait<span class="token punctuation">,</span>                                         syslog_seq <span class="token operator">!=</span> log_next_seq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token keyword">return</span> error<span class="token punctuation">;</span>        error <span class="token operator">=</span> <span class="token function">syslog_print</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><h3 id="proc-kmsg"><a href="#proc-kmsg" class="headerlink" title="/proc/kmsg"></a>/proc/kmsg</h3><p>linux在启动时会建立/proc文件系统，它是一个伪文件系统，它只存在内存当中，而不占用外存空间<br>它以文件系统的方式为访问系统内核数据的操作提供接口,/proc/kmsg提供的就是访问log buf的接口</p><img src="/2020/12/06/syslog/prockmsg.png" class="" title="prockmsg"><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmsg_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> inode <span class="token operator">*</span> inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> file <span class="token operator">*</span> file<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">do_syslog</span><span class="token punctuation">(</span>SYSLOG_ACTION_OPEN<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SYSLOG_FROM_PROC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码比较简单，如上</p><h3 id="dev-kmsg"><a href="#dev-kmsg" class="headerlink" title="/dev/kmsg"></a>/dev/kmsg</h3><p>/dev目录是设备目录，不同于/proc/kmsg的是，/dev/kmsg可以做seek、read历史log等更复杂的操作，原因是<br>对/dev/kmsg的operation会触发printk.c中其对应操作的回调函数，例如read /dev/kmsg的话则会调用到devmsg_read函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">struct</span> file_operations kmsg_fops <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>open <span class="token operator">=</span> devkmsg_open<span class="token punctuation">,</span>        <span class="token punctuation">.</span>read <span class="token operator">=</span> devkmsg_read<span class="token punctuation">,</span>        <span class="token punctuation">.</span>write_iter <span class="token operator">=</span> devkmsg_write<span class="token punctuation">,</span>        <span class="token punctuation">.</span>llseek <span class="token operator">=</span> devkmsg_llseek<span class="token punctuation">,</span>        <span class="token punctuation">.</span>poll <span class="token operator">=</span> devkmsg_poll<span class="token punctuation">,</span>        <span class="token punctuation">.</span>release <span class="token operator">=</span> devkmsg_release<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>devmsg_read函数源码中也位于printk.c中，其并没有调用do_syslog函数，而是直接操作的log_buf全局变量进行读取，因此行为于上述两种都有不同</p><p><strong>本文并未关注太多细节，重点在于整体框架</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux syslog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>licsptr中的测试代码</title>
      <link href="2020/11/21/licsptr-test/"/>
      <url>2020/11/21/licsptr-test/</url>
      
        <content type="html"><![CDATA[<p>libcsptr源码中的check目录下是其单元测试的源码，主要是使用了check的单元测试框架。</p><p>Check 最主要的优点是对于每一个测试用例的运行都 fork 一个子进程，这么做的原因是因为 C 语言的独特性：<br>  (1) 其它语言如 Java，Python，Ruby等，单元测试出错最多不过是抛出异常；<br>  (2) C 语言如果指针操作错误，乱指一气，可是会 coredump的。测试框架因此直接退出，用户是看不到任何返回的，只有郁闷的 coredump；<br>  (3) Check 的单元测试运行在 fork 的子进程中，可以避免测试框架由于 coredump 而崩溃。</p><p>首先查看check/test/test.c，代码比较简单</p><img src="/2020/11/21/licsptr-test/test.png" class="" title="test.c"><p>通过master_suite构造出一个Suite结构体，结构体中存放所有测试用例<br>往Suite结构体中添加用例的方法是</p><pre class=" language-c"><code class="language-c"><span class="token function">suite_add_tcase</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">make_test_case</span><span class="token punctuation">(</span><span class="token string">"misc"</span><span class="token punctuation">,</span> misc_tests<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中s是Suite结构体，misc_tests测试函数指针数组即测试用例，如下图所示</p><img src="/2020/11/21/licsptr-test/misc.png" class="" title="misc_tests"><p>然后在main函数中能过srunner_create中构造SRunner<br>通过srunner_run_all(Srunner *, CK_NORMAL)即可运行所有测试用例<br>srunner_ntests_failed可检查测试用例失败个数</p><p>有点费解的是这里</p><img src="/2020/11/21/licsptr-test/allocator.png" class="" title="allocator"><p>其实是licsptr实现的智能指针是可以指定alloc和dealloc函数的，这个测试用例是为了测试如果改变alloc函数从<br>malloc到一个自定义函数，是否返回一个空的smart ptr</p><p>第14行的lambda宏是一个帮助自定义函数的宏</p><pre class=" language-c"><code class="language-c"><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UNUSED size_t s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">define</span> lambda(RType, Body) ({ RType __fn__ Body; __fn__; })</span><span class="token macro property">#<span class="token directive keyword">define</span> UNUSED __attribute__ ((unused))</span><span class="token comment" spellcheck="true">//展开后</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">__fn__</span> <span class="token punctuation">(</span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span> size_t s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> __fn__<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种写法利用了GCC对C语言的扩展(被一对花括号包起来的代码块能够返回一个值),展开后的写法能够返回一个函数指针，<br>函数指针类型为返回值为void *，参数为size_t size_t，函数结构体为return NULL</p><pre class=" language-c"><code class="language-c">smalloc_allocator <span class="token operator">=</span> <span class="token punctuation">(</span>s_allocator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UNUSED size_t s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UNUSED <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等同于</span>smalloc_allocator <span class="token operator">=</span> <span class="token punctuation">(</span>s_allocator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>__fn__<span class="token punctuation">)</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>__fn__<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样就把libcsptr中的alloc和dealloc函数从malloc和free更改了，然后测试完毕后在第19行又改回正常值</p>]]></content>
      
      
      
        <tags>
            
            <tag> libcsptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libcsptr源码解析</title>
      <link href="2020/11/10/libcsptr/"/>
      <url>2020/11/10/libcsptr/</url>
      
        <content type="html"><![CDATA[<p>libcsptr是一个使用c语言实现的简单的智能指针库<br>github仓库地址是：[libcsptr]<a href="https://github.com/proficientc/libcsptr">https://github.com/proficientc/libcsptr</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>libcsptr中的智能指针的数据结构分布大致如图，从图中可以看出，每个智能指针都保存有元数据，其中包含引用计算以及析构函数等信息</p><img src="/2020/11/10/libcsptr/libcsptr.png" class="" title="ptr数据"><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>libcsptr中的ptr智能指针都有一个元数据的结构体，对于unique_ptr来说，这个结构体是s_meta。对于shared_ptr来说，这个结构体是s_meta_shared<br>这两个结构体的组成是：</p><pre class=" language-c"><code class="language-c">s_meta <span class="token operator">-></span>   <span class="token function">pointer_kind</span>     <span class="token punctuation">(</span>指针类型，数据类型：<span class="token keyword">enum</span><span class="token punctuation">)</span>            <span class="token function">f_destructor</span>     <span class="token punctuation">(</span>析构函数，类型：<span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">ptr</span>       <span class="token punctuation">(</span>有效数据起始地址<span class="token punctuation">)</span>s_meta_shared  <span class="token operator">-></span>  <span class="token function">pointer_kind</span>              <span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">)</span>                   <span class="token function">f_destructor</span>              <span class="token punctuation">(</span>析构函数，类型：<span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">ptr</span>                <span class="token punctuation">(</span>有效数据起始地址<span class="token punctuation">)</span>                   <span class="token keyword">volatile</span> size_t <span class="token function">ref_count</span> <span class="token punctuation">(</span>引用计数<span class="token punctuation">)</span></code></pre><h3 id="指针参数"><a href="#指针参数" class="headerlink" title="指针参数"></a>指针参数</h3><p>libcsptr在开辟智能指针时需要一个参数结构体，s_malloc_args</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    CSPTR_SENTINEL_DEC    size_t size<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 有效数据大小</span>    size_t nmemb<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 成员个数，用于判断是否是数组</span>    <span class="token keyword">enum</span> pointer_kind kind<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 智能指针类型</span>    f_destructor dtor<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//   析构函数指针</span>    <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//    meta中的data地址</span>        size_t size<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//    meta中的data的大小</span>    <span class="token punctuation">}</span> meta<span class="token punctuation">;</span><span class="token punctuation">}</span> s_smalloc_args<span class="token punctuation">;</span></code></pre><p>s_malloc_args 用在函数s_malloc_impl中，下面是s_malloc_impl的注释</p><pre class=" language-c"><code class="language-c">CSPTR_MALLOC_API<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">smalloc_impl</span><span class="token punctuation">(</span>s_smalloc_args <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>args<span class="token operator">-></span>size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// align the sizes to the size of a word</span>    size_t aligned_metasize <span class="token operator">=</span> <span class="token function">align</span><span class="token punctuation">(</span>args<span class="token operator">-></span>meta<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//meta.size</span>    size_t size <span class="token operator">=</span> <span class="token function">align</span><span class="token punctuation">(</span>args<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//args->size  有效数据大小</span>    size_t head_size <span class="token operator">=</span> args<span class="token operator">-></span>kind <span class="token operator">&amp;</span> SHARED <span class="token operator">?</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>s_meta_shared<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>s_meta<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// s_meta结构体大小</span>    s_meta_shared <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">alloc_entry</span><span class="token punctuation">(</span>head_size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> aligned_metasize<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// s_meta结构体大小 + meta data的大小 + 有效数据的大小 + 存放s_meta结构体大小与meta data的大小之和的数据大小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>shifted <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr <span class="token operator">+</span> head_size<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// meta data数据起始地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token operator">-></span>meta<span class="token punctuation">.</span>size <span class="token operator">&amp;&amp;</span> args<span class="token operator">-></span>meta<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>shifted<span class="token punctuation">,</span> args<span class="token operator">-></span>meta<span class="token punctuation">.</span>data<span class="token punctuation">,</span> args<span class="token operator">-></span>meta<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shifted <span class="token operator">+</span> aligned_metasize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//sz 指向存放放s_meta结构体大小与meta data的大小之和的数据的位置</span>    <span class="token operator">*</span>sz <span class="token operator">=</span> head_size <span class="token operator">+</span> aligned_metasize<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>s_meta<span class="token operator">*</span><span class="token punctuation">)</span> ptr <span class="token operator">=</span> <span class="token punctuation">(</span>s_meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>kind <span class="token operator">=</span> args<span class="token operator">-></span>kind<span class="token punctuation">,</span>        <span class="token punctuation">.</span>dtor <span class="token operator">=</span> args<span class="token operator">-></span>dtor<span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> NDEBUG</span>        <span class="token punctuation">.</span>ptr <span class="token operator">=</span> sz <span class="token operator">+</span> <span class="token number">1</span>                                     <span class="token comment" spellcheck="true">// sz再加1就是有效数据起始地址</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token operator">-></span>kind <span class="token operator">&amp;</span> SHARED<span class="token punctuation">)</span>        ptr<span class="token operator">-></span>ref_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sz <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="meta-data的作用"><a href="#meta-data的作用" class="headerlink" title="meta data的作用"></a>meta data的作用</h2><p>从dealloc_entry函数大概可以看出，meta data中的数据最后会被dtor析构函数释放</p><pre class=" language-c"><code class="language-c">CSPTR_INLINE <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dealloc_entry</span><span class="token punctuation">(</span>s_meta <span class="token operator">*</span>meta<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token operator">-></span>dtor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>user_meta <span class="token operator">=</span> <span class="token function">get_smart_ptr_meta</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token operator">-></span>kind <span class="token operator">&amp;</span> ARRAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            s_meta_array <span class="token operator">*</span>arr_meta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>meta <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr_meta<span class="token operator">-></span>nmemb<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                meta<span class="token operator">-></span><span class="token function">dtor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr <span class="token operator">+</span> arr_meta<span class="token operator">-></span>size <span class="token operator">*</span> i<span class="token punctuation">,</span> user_meta<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            meta<span class="token operator">-></span><span class="token function">dtor</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> user_meta<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//user_meta 指向meta data起始地址</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> SMALLOC_FIXED_ALLOCATOR</span>    <span class="token function">free</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">/* !SMALLOC_FIXED_ALLOCATOR */</span>    smalloc_allocator<span class="token punctuation">.</span><span class="token function">dealloc</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* !SMALLOC_FIXED_ALLOCATOR */</span><span class="token punctuation">}</span></code></pre><p>可以看个例子:</p><p>check/test/shared.c中的dtor其实只是个对dtor_run赋下值的函数，也就是说对于一般最简单的shared_ptr来说，meta data没什么用</p><pre class=" language-c"><code class="language-c"><span class="token function">START_TEST</span> <span class="token punctuation">(</span>test_shared_sref<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> dtor_run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              f_destructor dtor <span class="token operator">=</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UNUSED <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> UNUSED <span class="token keyword">void</span> <span class="token operator">*</span>meta<span class="token punctuation">)</span> <span class="token punctuation">{</span> dtor_run <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     smart <span class="token keyword">void</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">shared_ptr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> dtor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_valid_ptr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">{</span>        smart <span class="token keyword">void</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token function">sref</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">ck_assert_msg</span><span class="token punctuation">(</span>ptr <span class="token operator">==</span> ptr2<span class="token punctuation">,</span> <span class="token string">"Expected reference to be the same pointer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ck_assert_msg</span><span class="token punctuation">(</span>dtor_run <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Expected destructor NOT to have run."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> END_TEST</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> libcsptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="2020/11/09/start/"/>
      <url>2020/11/09/start/</url>
      
        <content type="html"><![CDATA[<p>博客好久没更，把之前的博客都删掉了，从新开始</p><p>希望能养成好习惯而且一直有时间来写博客</p><p>能多看写linux、编译器、有趣的开源代码等方面的东西，有些心得吧</p><img src="/2020/11/09/start/papa.jpg" class="" title="papa">]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
