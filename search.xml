<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>libcsptr源码解析</title>
      <link href="2020/11/10/libcsptr/"/>
      <url>2020/11/10/libcsptr/</url>
      
        <content type="html"><![CDATA[<p>libcsptr是一个使用c语言实现的简单的智能指针库<br>github仓库地址是：[libcsptr]<a href="https://github.com/proficientc/libcsptr">https://github.com/proficientc/libcsptr</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>libcsptr中的智能指针的数据结构分布大致如图，从图中可以看出，每个智能指针都保存有元数据，其中包含引用计算以及析构函数等信息</p><img src="/2020/11/10/libcsptr/libcsptr.png" class="" title="ptr数据"><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>libcsptr中的ptr智能指针都有一个元数据的结构体，对于unique_ptr来说，这个结构体是s_meta。对于shared_ptr来说，这个结构体是s_meta_shared<br>这两个结构体的组成是：</p><pre class=" language-c"><code class="language-c">s_meta <span class="token operator">-></span>   <span class="token function">pointer_kind</span>     <span class="token punctuation">(</span>指针类型，数据类型：<span class="token keyword">enum</span><span class="token punctuation">)</span>            <span class="token function">f_destructor</span>     <span class="token punctuation">(</span>析构函数，类型：<span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">ptr</span>       <span class="token punctuation">(</span>有效数据起始地址<span class="token punctuation">)</span>s_meta_shared  <span class="token operator">-></span>  <span class="token function">pointer_kind</span>              <span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">)</span>                   <span class="token function">f_destructor</span>              <span class="token punctuation">(</span>析构函数，类型：<span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">ptr</span>                <span class="token punctuation">(</span>有效数据起始地址<span class="token punctuation">)</span>                   <span class="token keyword">volatile</span> size_t <span class="token function">ref_count</span> <span class="token punctuation">(</span>引用计数<span class="token punctuation">)</span></code></pre><h3 id="指针参数"><a href="#指针参数" class="headerlink" title="指针参数"></a>指针参数</h3><p>libcsptr在开辟智能指针时需要一个参数结构体，s_malloc_args</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    CSPTR_SENTINEL_DEC    size_t size<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 有效数据大小</span>    size_t nmemb<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 成员个数，用于判断是否是数组</span>    <span class="token keyword">enum</span> pointer_kind kind<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 智能指针类型</span>    f_destructor dtor<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//   析构函数指针</span>    <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//    meta中的data地址</span>        size_t size<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//    meta中的data的大小</span>    <span class="token punctuation">}</span> meta<span class="token punctuation">;</span><span class="token punctuation">}</span> s_smalloc_args<span class="token punctuation">;</span></code></pre><p>s_malloc_args 用在函数s_malloc_impl中，下面是s_malloc_impl的注释</p><pre class=" language-c"><code class="language-c">CSPTR_MALLOC_API<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">smalloc_impl</span><span class="token punctuation">(</span>s_smalloc_args <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>args<span class="token operator">-></span>size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// align the sizes to the size of a word</span>    size_t aligned_metasize <span class="token operator">=</span> <span class="token function">align</span><span class="token punctuation">(</span>args<span class="token operator">-></span>meta<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//meta.size</span>    size_t size <span class="token operator">=</span> <span class="token function">align</span><span class="token punctuation">(</span>args<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//args->size  有效数据大小</span>    size_t head_size <span class="token operator">=</span> args<span class="token operator">-></span>kind <span class="token operator">&amp;</span> SHARED <span class="token operator">?</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>s_meta_shared<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>s_meta<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// s_meta结构体大小</span>    s_meta_shared <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">alloc_entry</span><span class="token punctuation">(</span>head_size<span class="token punctuation">,</span> size<span class="token punctuation">,</span> aligned_metasize<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// s_meta结构体大小 + meta data的大小 + 有效数据的大小 + 存放s_meta结构体大小与meta data的大小之和的数据大小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>shifted <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr <span class="token operator">+</span> head_size<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// meta data数据起始地址</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token operator">-></span>meta<span class="token punctuation">.</span>size <span class="token operator">&amp;&amp;</span> args<span class="token operator">-></span>meta<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>shifted<span class="token punctuation">,</span> args<span class="token operator">-></span>meta<span class="token punctuation">.</span>data<span class="token punctuation">,</span> args<span class="token operator">-></span>meta<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t <span class="token operator">*</span>sz <span class="token operator">=</span> <span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>shifted <span class="token operator">+</span> aligned_metasize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//sz 指向存放放s_meta结构体大小与meta data的大小之和的数据的位置</span>    <span class="token operator">*</span>sz <span class="token operator">=</span> head_size <span class="token operator">+</span> aligned_metasize<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>s_meta<span class="token operator">*</span><span class="token punctuation">)</span> ptr <span class="token operator">=</span> <span class="token punctuation">(</span>s_meta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>kind <span class="token operator">=</span> args<span class="token operator">-></span>kind<span class="token punctuation">,</span>        <span class="token punctuation">.</span>dtor <span class="token operator">=</span> args<span class="token operator">-></span>dtor<span class="token punctuation">,</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> NDEBUG</span>        <span class="token punctuation">.</span>ptr <span class="token operator">=</span> sz <span class="token operator">+</span> <span class="token number">1</span>                                     <span class="token comment" spellcheck="true">// sz再加1就是有效数据起始地址</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token operator">-></span>kind <span class="token operator">&amp;</span> SHARED<span class="token punctuation">)</span>        ptr<span class="token operator">-></span>ref_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sz <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="meta-data的作用"><a href="#meta-data的作用" class="headerlink" title="meta data的作用"></a>meta data的作用</h2><p>从dealloc_entry函数大概可以看出，meta data中的数据最后会被dtor析构函数释放</p><pre class=" language-c"><code class="language-c">CSPTR_INLINE <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dealloc_entry</span><span class="token punctuation">(</span>s_meta <span class="token operator">*</span>meta<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token operator">-></span>dtor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>user_meta <span class="token operator">=</span> <span class="token function">get_smart_ptr_meta</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token operator">-></span>kind <span class="token operator">&amp;</span> ARRAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            s_meta_array <span class="token operator">*</span>arr_meta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>meta <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr_meta<span class="token operator">-></span>nmemb<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                meta<span class="token operator">-></span><span class="token function">dtor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr <span class="token operator">+</span> arr_meta<span class="token operator">-></span>size <span class="token operator">*</span> i<span class="token punctuation">,</span> user_meta<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            meta<span class="token operator">-></span><span class="token function">dtor</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> user_meta<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//user_meta 指向meta data起始地址</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> SMALLOC_FIXED_ALLOCATOR</span>    <span class="token function">free</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span> </span><span class="token comment" spellcheck="true">/* !SMALLOC_FIXED_ALLOCATOR */</span>    smalloc_allocator<span class="token punctuation">.</span><span class="token function">dealloc</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">/* !SMALLOC_FIXED_ALLOCATOR */</span><span class="token punctuation">}</span></code></pre><p>可以看个例子:</p><p>check/test/shared.c中的dtor其实只是个对dtor_run赋下值的函数，也就是说对于一般最简单的shared_ptr来说，meta data没什么用</p><pre class=" language-c"><code class="language-c"><span class="token function">START_TEST</span> <span class="token punctuation">(</span>test_shared_sref<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> dtor_run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              f_destructor dtor <span class="token operator">=</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UNUSED <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> UNUSED <span class="token keyword">void</span> <span class="token operator">*</span>meta<span class="token punctuation">)</span> <span class="token punctuation">{</span> dtor_run <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     smart <span class="token keyword">void</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">shared_ptr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> dtor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_valid_ptr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">{</span>        smart <span class="token keyword">void</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token function">sref</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">ck_assert_msg</span><span class="token punctuation">(</span>ptr <span class="token operator">==</span> ptr2<span class="token punctuation">,</span> <span class="token string">"Expected reference to be the same pointer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ck_assert_msg</span><span class="token punctuation">(</span>dtor_run <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Expected destructor NOT to have run."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> END_TEST</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> libcsptr </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
